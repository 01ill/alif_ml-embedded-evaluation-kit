def common_funcs

pipeline {
    agent { label 'build2' }
    stages {
        stage('Init') {
            steps {
                script {
                    common_funcs = evaluate readTrusted("automation/test_common.groovy");
                }
            }
        }
        stage('Download dependencies') {
            steps {
                script {
                    common_funcs.download_dependencies()
                }
            }
        }
        stage('Setup resources') {
            steps {
                script {
                    common_funcs.setup_resources()
                }
            }
        }
        // Just build HE KWS release build for now
        stage('Build HE-TCM GCC Release') {
            steps {
                script {
                    common_funcs.build_he_tcm("Release", "gcc");
                }
            }
            post {
                success {
                    archiveArtifacts artifacts: '*/bin/*', fingerprint: true
                    stash name: "test_build_gnu_kws_he_release", includes: "build_gcc_he_tcm_release/bin/ethos-u-alif_kws.bin"
                }
                cleanup {
                    cleanWs(cleanWhenNotBuilt: false, deleteDirs: true, disableDeferredWipeout: true, notFailBuild: true)
                }
            }
        }
        // // First build can end up doing some patching of Tensorflow
        // // so run one build sequentially to start with
        // stage('Build HP GCC Release') {
        //     steps {
        //         script {
        //             common_funcs.build_hp("Release", "gcc");
        //         }
        //     }
        // }
        // // Remaining builds can be parallel
        // stage('More builds') {
        //     parallel {
        //         stage('Build HP GCC Debug') {
        //             steps {
        //                 script {
        //                     common_funcs.build_hp("Debug", "gcc");
        //                 }
        //             }
        //         }
        //         stage('Build HE-TCM GCC Release') {
        //             steps {
        //                 script {
        //                     common_funcs.build_he_tcm("Release", "gcc");
        //                 }
        //             }
        //         }
        //         stage('Build HE-TCM GCC Debug') {
        //             steps {
        //                 script {
        //                     common_funcs.build_he_tcm("Debug", "gcc");
        //                 }
        //             }
        //         }
        //     }
        // }
        stage('Test KWS HE Release') {
            agent { label 'tester_B' }
            steps {
                unstash name: "test_build_gnu_kws_he_release"
                script {
                    try {
                    common_funcs.flash_and_run_pytest("alif_kws_he.json", "build_gcc_he_tcm_release/bin", "ethos-u-alif_kws.bin");
                    } catch (Exception e) {
                        echo 'Exception occurred: ' + e.toString()
                        stageResult: 'UNSTABLE'
                    }
                }
            }
            post {
                always {
                    archiveArtifacts artifacts: 'alif_kws_he.json', fingerprint: false, allowEmptyArchive: true
                    archiveArtifacts artifacts: '*/junit/*', fingerprint: false, allowEmptyArchive: true
                    archiveArtifacts artifacts: 'pytest/pytest-logs/pytest-embedded/**', fingerprint: false, allowEmptyArchive: true
                    junit skipPublishingChecks: true, testResults: 'pytest/junit/junit-report-ethos-u-alif_kws.bin.xml'
                }
                cleanup {
                    cleanWs(cleanWhenNotBuilt: false, deleteDirs: true, disableDeferredWipeout: true, notFailBuild: true)
                }
            }
        }
    }
}
